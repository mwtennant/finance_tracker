{"ast":null,"code":"var _jsxFileName = \"/Users/matthewwtennant/Documents/Code/finance_tracker/v_01/finance_tracker/client/src/context/AccountContext.js\",\n  _s = $RefreshSig$();\n// AccountContext.js\nimport { createContext, useState, useEffect, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:5001/api\";\nexport const AccountContext = /*#__PURE__*/createContext();\nexport const AccountProvider = ({\n  children\n}) => {\n  _s();\n  const [standardAccounts, setStandardAccounts] = useState([]);\n  const [creditAccounts, setCreditAccounts] = useState([]);\n  const [loans, setLoans] = useState([]);\n  const [investmentAccounts, setInvestmentAccounts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch all accounts\n  const fetchAllAccounts = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Fetch standard accounts\n      const standardResponse = await fetch(`${API_URL}/accounts`);\n      if (!standardResponse.ok) {\n        throw new Error(`Failed to fetch standard accounts: ${standardResponse.statusText}`);\n      }\n      const standardData = await standardResponse.json();\n      setStandardAccounts(standardData.data);\n\n      // Fetch credit accounts\n      const creditResponse = await fetch(`${API_URL}/credit-accounts`);\n      if (!creditResponse.ok) {\n        throw new Error(`Failed to fetch credit accounts: ${creditResponse.statusText}`);\n      }\n      const creditData = await creditResponse.json();\n      setCreditAccounts(creditData.data);\n\n      // Fetch loans\n      const loansResponse = await fetch(`${API_URL}/loans`);\n      if (!loansResponse.ok) {\n        throw new Error(`Failed to fetch loans: ${loansResponse.statusText}`);\n      }\n      const loansData = await loansResponse.json();\n      setLoans(loansData.data);\n\n      // Fetch investment accounts\n      const investmentResponse = await fetch(`${API_URL}/investment-accounts`);\n      if (!investmentResponse.ok) {\n        throw new Error(`Failed to fetch investment accounts: ${investmentResponse.statusText}`);\n      }\n      const investmentData = await investmentResponse.json();\n      setInvestmentAccounts(investmentData.data);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Create a standard account\n  const createStandardAccount = async accountData => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/accounts`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(accountData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create standard account\");\n      }\n      const data = await response.json();\n      setStandardAccounts(prevAccounts => [...prevAccounts, data.data]);\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Create a credit account\n  const createCreditAccount = async accountData => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/credit-accounts`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(accountData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create credit account\");\n      }\n      const data = await response.json();\n      setCreditAccounts(prevAccounts => [...prevAccounts, data.data]);\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Create a loan\n  const createLoan = async loanData => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/loans`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(loanData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create loan\");\n      }\n      const data = await response.json();\n      setLoans(prevLoans => [...prevLoans, data.data]);\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Create an investment account\n  const createInvestmentAccount = async accountData => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/investment-accounts`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(accountData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create investment account\");\n      }\n      const data = await response.json();\n      setInvestmentAccounts(prevAccounts => [...prevAccounts, data.data]);\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update a standard account\n  const updateStandardAccount = async (id, accountData) => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/accounts/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(accountData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to update standard account\");\n      }\n      const data = await response.json();\n      setStandardAccounts(prevAccounts => prevAccounts.map(account => account.id === id ? data.data : account));\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update a credit account\n  const updateCreditAccount = async (id, accountData) => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/credit-accounts/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(accountData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to update credit account\");\n      }\n      const data = await response.json();\n      setCreditAccounts(prevAccounts => prevAccounts.map(account => account.id === id ? data.data : account));\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update a loan\n  const updateLoan = async (id, loanData) => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/loans/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(loanData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to update loan\");\n      }\n      const data = await response.json();\n      setLoans(prevLoans => prevLoans.map(loan => loan.id === id ? data.data : loan));\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update an investment account\n  const updateInvestmentAccount = async (id, accountData) => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/investment-accounts/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(accountData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to update investment account\");\n      }\n      const data = await response.json();\n      setInvestmentAccounts(prevAccounts => prevAccounts.map(account => account.id === id ? data.data : account));\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Delete a standard account\n  const deleteStandardAccount = async id => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/accounts/${id}`, {\n        method: \"DELETE\"\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to delete standard account\");\n      }\n      setStandardAccounts(prevAccounts => prevAccounts.filter(account => account.id !== id));\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Delete a credit account\n  const deleteCreditAccount = async id => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/credit-accounts/${id}`, {\n        method: \"DELETE\"\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to delete credit account\");\n      }\n      setCreditAccounts(prevAccounts => prevAccounts.filter(account => account.id !== id));\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Delete a loan\n  const deleteLoan = async id => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/loans/${id}`, {\n        method: \"DELETE\"\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to delete loan\");\n      }\n      setLoans(prevLoans => prevLoans.filter(loan => loan.id !== id));\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Delete an investment account\n  const deleteInvestmentAccount = async id => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/investment-accounts/${id}`, {\n        method: \"DELETE\"\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to delete investment account\");\n      }\n      setInvestmentAccounts(prevAccounts => prevAccounts.filter(account => account.id !== id));\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Link an account to a plan\n  const linkAccountToPlan = async (planId, accountId, accountType) => {\n    setError(null);\n    try {\n      const accountTypeMap = {\n        standard: \"standard\",\n        credit: \"credit\",\n        loan: \"loan\",\n        investment: \"investment\"\n      };\n      const response = await fetch(`${API_URL}/plans/${planId}/accounts`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          accountId,\n          accountType: accountTypeMap[accountType]\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to link account to plan\");\n      }\n      const data = await response.json();\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Unlink an account from a plan\n  const unlinkAccountFromPlan = async (planId, accountId, accountType) => {\n    setError(null);\n    try {\n      const accountTypeMap = {\n        standard: \"standard\",\n        credit: \"credit\",\n        loan: \"loan\",\n        investment: \"investment\"\n      };\n      const response = await fetch(`${API_URL}/plans/${planId}/accounts`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          accountId,\n          accountType: accountTypeMap[accountType]\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to unlink account from plan\");\n      }\n      const data = await response.json();\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Load all accounts on mount\n  useEffect(() => {\n    fetchAllAccounts();\n  }, [fetchAllAccounts]);\n  return /*#__PURE__*/_jsxDEV(AccountContext.Provider, {\n    value: {\n      standardAccounts,\n      creditAccounts,\n      loans,\n      investmentAccounts,\n      loading,\n      error,\n      fetchAllAccounts,\n      createStandardAccount,\n      createCreditAccount,\n      createLoan,\n      createInvestmentAccount,\n      updateStandardAccount,\n      updateCreditAccount,\n      updateLoan,\n      updateInvestmentAccount,\n      deleteStandardAccount,\n      deleteCreditAccount,\n      deleteLoan,\n      deleteInvestmentAccount,\n      linkAccountToPlan,\n      unlinkAccountFromPlan\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 457,\n    columnNumber: 5\n  }, this);\n};\n_s(AccountProvider, \"BYe6hrGUxvaYmqcoj5k1wCGJYBs=\");\n_c = AccountProvider;\nvar _c;\n$RefreshReg$(_c, \"AccountProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useCallback","jsxDEV","_jsxDEV","API_URL","AccountContext","AccountProvider","children","_s","standardAccounts","setStandardAccounts","creditAccounts","setCreditAccounts","loans","setLoans","investmentAccounts","setInvestmentAccounts","loading","setLoading","error","setError","fetchAllAccounts","standardResponse","fetch","ok","Error","statusText","standardData","json","data","creditResponse","creditData","loansResponse","loansData","investmentResponse","investmentData","err","message","createStandardAccount","accountData","response","method","headers","body","JSON","stringify","errorData","prevAccounts","createCreditAccount","createLoan","loanData","prevLoans","createInvestmentAccount","updateStandardAccount","id","map","account","updateCreditAccount","updateLoan","loan","updateInvestmentAccount","deleteStandardAccount","filter","deleteCreditAccount","deleteLoan","deleteInvestmentAccount","linkAccountToPlan","planId","accountId","accountType","accountTypeMap","standard","credit","investment","unlinkAccountFromPlan","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/matthewwtennant/Documents/Code/finance_tracker/v_01/finance_tracker/client/src/context/AccountContext.js"],"sourcesContent":["// AccountContext.js\nimport { createContext, useState, useEffect, useCallback } from \"react\";\n\nconst API_URL = \"http://localhost:5001/api\";\n\nexport const AccountContext = createContext();\n\nexport const AccountProvider = ({ children }) => {\n  const [standardAccounts, setStandardAccounts] = useState([]);\n  const [creditAccounts, setCreditAccounts] = useState([]);\n  const [loans, setLoans] = useState([]);\n  const [investmentAccounts, setInvestmentAccounts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch all accounts\n  const fetchAllAccounts = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Fetch standard accounts\n      const standardResponse = await fetch(`${API_URL}/accounts`);\n      if (!standardResponse.ok) {\n        throw new Error(\n          `Failed to fetch standard accounts: ${standardResponse.statusText}`\n        );\n      }\n      const standardData = await standardResponse.json();\n      setStandardAccounts(standardData.data);\n\n      // Fetch credit accounts\n      const creditResponse = await fetch(`${API_URL}/credit-accounts`);\n      if (!creditResponse.ok) {\n        throw new Error(\n          `Failed to fetch credit accounts: ${creditResponse.statusText}`\n        );\n      }\n      const creditData = await creditResponse.json();\n      setCreditAccounts(creditData.data);\n\n      // Fetch loans\n      const loansResponse = await fetch(`${API_URL}/loans`);\n      if (!loansResponse.ok) {\n        throw new Error(`Failed to fetch loans: ${loansResponse.statusText}`);\n      }\n      const loansData = await loansResponse.json();\n      setLoans(loansData.data);\n\n      // Fetch investment accounts\n      const investmentResponse = await fetch(`${API_URL}/investment-accounts`);\n      if (!investmentResponse.ok) {\n        throw new Error(\n          `Failed to fetch investment accounts: ${investmentResponse.statusText}`\n        );\n      }\n      const investmentData = await investmentResponse.json();\n      setInvestmentAccounts(investmentData.data);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Create a standard account\n  const createStandardAccount = async (accountData) => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/accounts`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(accountData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.message || \"Failed to create standard account\"\n        );\n      }\n\n      const data = await response.json();\n      setStandardAccounts((prevAccounts) => [...prevAccounts, data.data]);\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Create a credit account\n  const createCreditAccount = async (accountData) => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/credit-accounts`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(accountData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create credit account\");\n      }\n\n      const data = await response.json();\n      setCreditAccounts((prevAccounts) => [...prevAccounts, data.data]);\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Create a loan\n  const createLoan = async (loanData) => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/loans`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(loanData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create loan\");\n      }\n\n      const data = await response.json();\n      setLoans((prevLoans) => [...prevLoans, data.data]);\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Create an investment account\n  const createInvestmentAccount = async (accountData) => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/investment-accounts`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(accountData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.message || \"Failed to create investment account\"\n        );\n      }\n\n      const data = await response.json();\n      setInvestmentAccounts((prevAccounts) => [...prevAccounts, data.data]);\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update a standard account\n  const updateStandardAccount = async (id, accountData) => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/accounts/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(accountData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.message || \"Failed to update standard account\"\n        );\n      }\n\n      const data = await response.json();\n      setStandardAccounts((prevAccounts) =>\n        prevAccounts.map((account) => (account.id === id ? data.data : account))\n      );\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update a credit account\n  const updateCreditAccount = async (id, accountData) => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/credit-accounts/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(accountData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to update credit account\");\n      }\n\n      const data = await response.json();\n      setCreditAccounts((prevAccounts) =>\n        prevAccounts.map((account) => (account.id === id ? data.data : account))\n      );\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update a loan\n  const updateLoan = async (id, loanData) => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/loans/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(loanData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to update loan\");\n      }\n\n      const data = await response.json();\n      setLoans((prevLoans) =>\n        prevLoans.map((loan) => (loan.id === id ? data.data : loan))\n      );\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update an investment account\n  const updateInvestmentAccount = async (id, accountData) => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/investment-accounts/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(accountData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.message || \"Failed to update investment account\"\n        );\n      }\n\n      const data = await response.json();\n      setInvestmentAccounts((prevAccounts) =>\n        prevAccounts.map((account) => (account.id === id ? data.data : account))\n      );\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Delete a standard account\n  const deleteStandardAccount = async (id) => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/accounts/${id}`, {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.message || \"Failed to delete standard account\"\n        );\n      }\n\n      setStandardAccounts((prevAccounts) =>\n        prevAccounts.filter((account) => account.id !== id)\n      );\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Delete a credit account\n  const deleteCreditAccount = async (id) => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/credit-accounts/${id}`, {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to delete credit account\");\n      }\n\n      setCreditAccounts((prevAccounts) =>\n        prevAccounts.filter((account) => account.id !== id)\n      );\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Delete a loan\n  const deleteLoan = async (id) => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/loans/${id}`, {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to delete loan\");\n      }\n\n      setLoans((prevLoans) => prevLoans.filter((loan) => loan.id !== id));\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Delete an investment account\n  const deleteInvestmentAccount = async (id) => {\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/investment-accounts/${id}`, {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.message || \"Failed to delete investment account\"\n        );\n      }\n\n      setInvestmentAccounts((prevAccounts) =>\n        prevAccounts.filter((account) => account.id !== id)\n      );\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Link an account to a plan\n  const linkAccountToPlan = async (planId, accountId, accountType) => {\n    setError(null);\n    try {\n      const accountTypeMap = {\n        standard: \"standard\",\n        credit: \"credit\",\n        loan: \"loan\",\n        investment: \"investment\",\n      };\n\n      const response = await fetch(`${API_URL}/plans/${planId}/accounts`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          accountId,\n          accountType: accountTypeMap[accountType],\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to link account to plan\");\n      }\n\n      const data = await response.json();\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Unlink an account from a plan\n  const unlinkAccountFromPlan = async (planId, accountId, accountType) => {\n    setError(null);\n    try {\n      const accountTypeMap = {\n        standard: \"standard\",\n        credit: \"credit\",\n        loan: \"loan\",\n        investment: \"investment\",\n      };\n\n      const response = await fetch(`${API_URL}/plans/${planId}/accounts`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          accountId,\n          accountType: accountTypeMap[accountType],\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.message || \"Failed to unlink account from plan\"\n        );\n      }\n\n      const data = await response.json();\n      return data.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Load all accounts on mount\n  useEffect(() => {\n    fetchAllAccounts();\n  }, [fetchAllAccounts]);\n\n  return (\n    <AccountContext.Provider\n      value={{\n        standardAccounts,\n        creditAccounts,\n        loans,\n        investmentAccounts,\n        loading,\n        error,\n        fetchAllAccounts,\n        createStandardAccount,\n        createCreditAccount,\n        createLoan,\n        createInvestmentAccount,\n        updateStandardAccount,\n        updateCreditAccount,\n        updateLoan,\n        updateInvestmentAccount,\n        deleteStandardAccount,\n        deleteCreditAccount,\n        deleteLoan,\n        deleteInvestmentAccount,\n        linkAccountToPlan,\n        unlinkAccountFromPlan,\n      }}\n    >\n      {children}\n    </AccountContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}