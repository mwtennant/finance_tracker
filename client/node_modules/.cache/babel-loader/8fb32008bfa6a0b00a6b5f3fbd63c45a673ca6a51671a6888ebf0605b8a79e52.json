{"ast":null,"code":"var _jsxFileName = \"/Users/matthewwtennant/Documents/Code/finance_tracker/v_01/finance_tracker/client/src/context/PlanContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// PlanContext.js\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\n\n// API base URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:5000/api';\n\n// Context for storing and accessing financial plan data across components\nconst PlanContext = /*#__PURE__*/createContext();\n\n// Provider component that makes plan data available to any child component\nexport const PlanProvider = ({\n  children\n}) => {\n  _s();\n  const [plans, setPlans] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch all plans\n  const fetchPlans = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setPlans(data.data || []);\n    } catch (err) {\n      console.error('Error fetching plans:', err);\n      setError('Failed to load plans. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Get a single plan by ID\n  const getPlan = useCallback(async id => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans/${id}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data.data;\n    } catch (err) {\n      console.error(`Error fetching plan ${id}:`, err);\n      setError('Failed to load plan details. Please try again later.');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Create a new plan\n  const createPlan = async planData => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(planData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setPlans([...plans, data.data]);\n      return data.data;\n    } catch (err) {\n      console.error('Error creating plan:', err);\n      setError(err.message || 'Failed to create plan. Please try again later.');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Link an account to a plan\n  const linkAccountToPlan = async (planId, accountId, accountType) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans/${planId}/accounts`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          accountId,\n          accountType\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      // Refresh plan data to get updated linked accounts\n      await fetchPlans();\n      return data;\n    } catch (err) {\n      console.error(`Error linking account to plan ${planId}:`, err);\n      setError('Failed to link account to plan. Please try again later.');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Unlink an account from a plan\n  const unlinkAccountFromPlan = async (planId, accountId, accountType) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans/${planId}/accounts`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          accountId,\n          accountType\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      // Refresh plan data to get updated linked accounts\n      await fetchPlans();\n      return data;\n    } catch (err) {\n      console.error(`Error unlinking account from plan ${planId}:`, err);\n      setError('Failed to unlink account from plan. Please try again later.');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load plans on initial render\n  useEffect(() => {\n    fetchPlans();\n  }, [fetchPlans]);\n  return /*#__PURE__*/_jsxDEV(PlanContext.Provider, {\n    value: {\n      plans,\n      loading,\n      error,\n      getPlan,\n      createPlan,\n      linkAccountToPlan,\n      unlinkAccountFromPlan,\n      refreshPlans: fetchPlans\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the plan context\n_s(PlanProvider, \"v3ayOhltz+fJIWW3h/V1L+/m5LY=\");\n_c = PlanProvider;\nexport const usePlans = () => {\n  _s2();\n  const context = useContext(PlanContext);\n  if (!context) {\n    throw new Error('usePlans must be used within a PlanProvider');\n  }\n  return context;\n};\n_s2(usePlans, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default PlanContext;\nvar _c;\n$RefreshReg$(_c, \"PlanProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","jsxDEV","_jsxDEV","API_URL","PlanContext","PlanProvider","children","_s","plans","setPlans","loading","setLoading","error","setError","fetchPlans","response","fetch","ok","Error","status","data","json","err","console","getPlan","id","createPlan","planData","method","headers","body","JSON","stringify","errorData","message","linkAccountToPlan","planId","accountId","accountType","unlinkAccountFromPlan","Provider","value","refreshPlans","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePlans","_s2","context","$RefreshReg$"],"sources":["/Users/matthewwtennant/Documents/Code/finance_tracker/v_01/finance_tracker/client/src/context/PlanContext.js"],"sourcesContent":["// PlanContext.js\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\n\n// API base URL\nconst API_URL = 'http://localhost:5000/api';\n\n// Context for storing and accessing financial plan data across components\nconst PlanContext = createContext();\n\n// Provider component that makes plan data available to any child component\nexport const PlanProvider = ({ children }) => {\n  const [plans, setPlans] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch all plans\n  const fetchPlans = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setPlans(data.data || []);\n    } catch (err) {\n      console.error('Error fetching plans:', err);\n      setError('Failed to load plans. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Get a single plan by ID\n  const getPlan = useCallback(async (id) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans/${id}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data.data;\n    } catch (err) {\n      console.error(`Error fetching plan ${id}:`, err);\n      setError('Failed to load plan details. Please try again later.');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Create a new plan\n  const createPlan = async (planData) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(planData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! Status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setPlans([...plans, data.data]);\n      return data.data;\n    } catch (err) {\n      console.error('Error creating plan:', err);\n      setError(err.message || 'Failed to create plan. Please try again later.');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Link an account to a plan\n  const linkAccountToPlan = async (planId, accountId, accountType) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans/${planId}/accounts`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ accountId, accountType }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! Status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      // Refresh plan data to get updated linked accounts\n      await fetchPlans();\n      return data;\n    } catch (err) {\n      console.error(`Error linking account to plan ${planId}:`, err);\n      setError('Failed to link account to plan. Please try again later.');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Unlink an account from a plan\n  const unlinkAccountFromPlan = async (planId, accountId, accountType) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans/${planId}/accounts`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ accountId, accountType }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! Status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      // Refresh plan data to get updated linked accounts\n      await fetchPlans();\n      return data;\n    } catch (err) {\n      console.error(`Error unlinking account from plan ${planId}:`, err);\n      setError('Failed to unlink account from plan. Please try again later.');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load plans on initial render\n  useEffect(() => {\n    fetchPlans();\n  }, [fetchPlans]);\n\n  return (\n    <PlanContext.Provider \n      value={{\n        plans,\n        loading,\n        error,\n        getPlan,\n        createPlan,\n        linkAccountToPlan,\n        unlinkAccountFromPlan,\n        refreshPlans: fetchPlans\n      }}\n    >\n      {children}\n    </PlanContext.Provider>\n  );\n};\n\n// Custom hook to use the plan context\nexport const usePlans = () => {\n  const context = useContext(PlanContext);\n  if (!context) {\n    throw new Error('usePlans must be used within a PlanProvider');\n  }\n  return context;\n};\n\nexport default PlanContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}