{"ast":null,"code":"var _jsxFileName = \"/Users/matthewwtennant/Documents/Code/finance_tracker/v_01/finance_tracker/client/src/context/PlanContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// PlanContext.js\nimport React, { createContext, useContext, useState, useEffect, useCallback } from \"react\";\n\n// API base URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:5002/api\";\n\n// Context for storing and accessing financial plan data across components\nconst PlanContext = /*#__PURE__*/createContext();\n\n// Provider component that makes plan data available to any child component\nexport const PlanProvider = ({\n  children\n}) => {\n  _s();\n  const [plans, setPlans] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch all plans\n  const fetchPlans = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans`);\n      if (!response.ok) {\n        // Handle specific status codes with more informative messages\n        if (response.status === 500) {\n          throw new Error('Server error. The server might be down or experiencing issues.');\n        } else if (response.status === 404) {\n          throw new Error('The plans endpoint was not found. API might have changed.');\n        } else {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n      }\n      const data = await response.json();\n      setPlans(data.data || []);\n    } catch (err) {\n      console.error(\"Error fetching plans:\", err);\n      // Set a more descriptive error message for the user\n      setError(err.message || \"Failed to load plans. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Get a single plan by ID\n  const getPlan = useCallback(async id => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans/${id}`);\n      if (!response.ok) {\n        // Handle specific error codes\n        if (response.status === 404) {\n          setError(`The plan with ID ${id} was not found.`);\n          return null;\n        }\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data.data;\n    } catch (err) {\n      console.error(`Error fetching plan ${id}:`, err);\n      if (err.message.includes(\"Failed to fetch\")) {\n        setError(\"Network error. Please check your connection and try again.\");\n      } else {\n        setError(\"Failed to load plan details. Please try again later.\");\n      }\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Create a new plan\n  const createPlan = async planData => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(planData),\n        credentials: \"include\" // Include credentials for CORS\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setPlans([...plans, data.data]);\n      return data.data;\n    } catch (err) {\n      console.error(\"Error creating plan:\", err);\n\n      // Improved error handling with more specific messages\n      if (err instanceof TypeError && err.message.includes(\"fetch\")) {\n        // Network error, likely CORS\n        setError(\"Failed to connect to the server. This might be a CORS issue or the server is down.\");\n      } else {\n        setError(err.message || \"Failed to create plan. Please try again later.\");\n      }\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Link an account to a plan\n  const linkAccountToPlan = async (planId, accountId, accountType) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans/${planId}/accounts`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          accountId,\n          accountType\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      // Refresh plan data to get updated linked accounts\n      await fetchPlans();\n      return data;\n    } catch (err) {\n      console.error(`Error linking account to plan ${planId}:`, err);\n      setError(\"Failed to link account to plan. Please try again later.\");\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Unlink an account from a plan\n  const unlinkAccountFromPlan = async (planId, accountId, accountType) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans/${planId}/accounts`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          accountId,\n          accountType\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      // Refresh plan data to get updated linked accounts\n      await fetchPlans();\n      return data;\n    } catch (err) {\n      console.error(`Error unlinking account from plan ${planId}:`, err);\n      setError(\"Failed to unlink account from plan. Please try again later.\");\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load plans on initial render\n  useEffect(() => {\n    fetchPlans();\n  }, [fetchPlans]);\n\n  // Add a setter for error to allow components to clear error state\n  const clearError = () => setError(null);\n  return /*#__PURE__*/_jsxDEV(PlanContext.Provider, {\n    value: {\n      plans,\n      loading,\n      error,\n      setError,\n      // Expose the error setter\n      clearError,\n      // Expose a dedicated function to clear errors\n      getPlan,\n      createPlan,\n      linkAccountToPlan,\n      unlinkAccountFromPlan,\n      refreshPlans: fetchPlans\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the plan context\n_s(PlanProvider, \"v3ayOhltz+fJIWW3h/V1L+/m5LY=\");\n_c = PlanProvider;\nexport const usePlans = () => {\n  _s2();\n  const context = useContext(PlanContext);\n  if (!context) {\n    throw new Error(\"usePlans must be used within a PlanProvider\");\n  }\n  return context;\n};\n_s2(usePlans, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default PlanContext;\nvar _c;\n$RefreshReg$(_c, \"PlanProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","jsxDEV","_jsxDEV","API_URL","PlanContext","PlanProvider","children","_s","plans","setPlans","loading","setLoading","error","setError","fetchPlans","response","fetch","ok","status","Error","data","json","err","console","message","getPlan","id","includes","createPlan","planData","method","headers","body","JSON","stringify","credentials","errorData","TypeError","linkAccountToPlan","planId","accountId","accountType","unlinkAccountFromPlan","clearError","Provider","value","refreshPlans","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePlans","_s2","context","$RefreshReg$"],"sources":["/Users/matthewwtennant/Documents/Code/finance_tracker/v_01/finance_tracker/client/src/context/PlanContext.js"],"sourcesContent":["// PlanContext.js\nimport React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useCallback,\n} from \"react\";\n\n// API base URL\nconst API_URL = \"http://localhost:5002/api\";\n\n// Context for storing and accessing financial plan data across components\nconst PlanContext = createContext();\n\n// Provider component that makes plan data available to any child component\nexport const PlanProvider = ({ children }) => {\n  const [plans, setPlans] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch all plans\n  const fetchPlans = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans`);\n      \n      if (!response.ok) {\n        // Handle specific status codes with more informative messages\n        if (response.status === 500) {\n          throw new Error('Server error. The server might be down or experiencing issues.');\n        } else if (response.status === 404) {\n          throw new Error('The plans endpoint was not found. API might have changed.');\n        } else {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n      }\n      \n      const data = await response.json();\n      setPlans(data.data || []);\n    } catch (err) {\n      console.error(\"Error fetching plans:\", err);\n      // Set a more descriptive error message for the user\n      setError(err.message || \"Failed to load plans. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Get a single plan by ID\n  const getPlan = useCallback(async (id) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans/${id}`);\n\n      if (!response.ok) {\n        // Handle specific error codes\n        if (response.status === 404) {\n          setError(`The plan with ID ${id} was not found.`);\n          return null;\n        }\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data.data;\n    } catch (err) {\n      console.error(`Error fetching plan ${id}:`, err);\n\n      if (err.message.includes(\"Failed to fetch\")) {\n        setError(\"Network error. Please check your connection and try again.\");\n      } else {\n        setError(\"Failed to load plan details. Please try again later.\");\n      }\n\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Create a new plan\n  const createPlan = async (planData) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(planData),\n        credentials: \"include\", // Include credentials for CORS\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.message || `HTTP error! Status: ${response.status}`\n        );\n      }\n\n      const data = await response.json();\n      setPlans([...plans, data.data]);\n      return data.data;\n    } catch (err) {\n      console.error(\"Error creating plan:\", err);\n\n      // Improved error handling with more specific messages\n      if (err instanceof TypeError && err.message.includes(\"fetch\")) {\n        // Network error, likely CORS\n        setError(\n          \"Failed to connect to the server. This might be a CORS issue or the server is down.\"\n        );\n      } else {\n        setError(\n          err.message || \"Failed to create plan. Please try again later.\"\n        );\n      }\n\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Link an account to a plan\n  const linkAccountToPlan = async (planId, accountId, accountType) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans/${planId}/accounts`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ accountId, accountType }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.message || `HTTP error! Status: ${response.status}`\n        );\n      }\n\n      const data = await response.json();\n      // Refresh plan data to get updated linked accounts\n      await fetchPlans();\n      return data;\n    } catch (err) {\n      console.error(`Error linking account to plan ${planId}:`, err);\n      setError(\"Failed to link account to plan. Please try again later.\");\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Unlink an account from a plan\n  const unlinkAccountFromPlan = async (planId, accountId, accountType) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_URL}/plans/${planId}/accounts`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ accountId, accountType }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.message || `HTTP error! Status: ${response.status}`\n        );\n      }\n\n      const data = await response.json();\n      // Refresh plan data to get updated linked accounts\n      await fetchPlans();\n      return data;\n    } catch (err) {\n      console.error(`Error unlinking account from plan ${planId}:`, err);\n      setError(\"Failed to unlink account from plan. Please try again later.\");\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load plans on initial render\n  useEffect(() => {\n    fetchPlans();\n  }, [fetchPlans]);\n\n  // Add a setter for error to allow components to clear error state\n  const clearError = () => setError(null);\n  \n  return (\n    <PlanContext.Provider\n      value={{\n        plans,\n        loading,\n        error,\n        setError, // Expose the error setter\n        clearError, // Expose a dedicated function to clear errors\n        getPlan,\n        createPlan,\n        linkAccountToPlan,\n        unlinkAccountFromPlan,\n        refreshPlans: fetchPlans,\n      }}\n    >\n      {children}\n    </PlanContext.Provider>\n  );\n};\n\n// Custom hook to use the plan context\nexport const usePlans = () => {\n  const context = useContext(PlanContext);\n  if (!context) {\n    throw new Error(\"usePlans must be used within a PlanProvider\");\n  }\n  return context;\n};\n\nexport default PlanContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}